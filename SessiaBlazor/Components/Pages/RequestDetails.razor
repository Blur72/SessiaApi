@rendermode InteractiveServer
@page "/request/{RequestId:int}"
@using SessiaBlazor.Model
@using Microsoft.AspNetCore.SignalR.Client

@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS

<h3 class="text-center mb-4">–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏</h3>
@if (request == null)
{
    <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
}
else
{
    <div class="details-card-orange shadow">
        <div class="mb-3">
            <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> @carName
        </div>
        <div class="mb-3">
            <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> @request.Description
        </div>
        <div class="mb-3">
            <b>–°—Ç–∞—Ç—É—Å:</b>
            @if (currentUser != null && currentUser.RoleId == 1 && request.MasterId == currentUser.Id)
            {
                <select class="form-select w-auto d-inline-block" @bind="editableStatus">
                    <option value="–í —Ä–∞–±–æ—Ç–µ">–í —Ä–∞–±–æ—Ç–µ</option>
                    <option value="–û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞">–û–∂–∏–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞</option>
                    <option value="–í—ã–ø–æ–ª–Ω–µ–Ω–æ">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</option>
                </select>
                <button class="btn btn-orange btn-sm ms-2" @onclick="SaveStatus" disabled="@(editableStatus == request.Status)">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            }
            else
            {
                @request.Status
            }
        </div>
        <div class="mb-3">
            <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> @request.CreatedAt.ToString("dd.MM.yyyy HH:mm")
        </div>
        <div class="mb-3">
            <b>–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞:</b> @request.DesiredDate.ToString("dd.MM.yyyy")
        </div>
        <div class="mb-3">
            <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b>
            @if (currentUser != null && currentUser.RoleId == 2)
            {
                <select class="form-select w-auto d-inline-block" @bind="selectedManagerId">
                    <option value="">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</option>
                    @foreach (var user in users.Where(u => u.RoleId == 2))
                    {
                        <option value="@user.Id">@user.UserName</option>
                    }
                </select>
                <button class="btn btn-orange btn-sm ms-2" @onclick="AssignManager" disabled="@(selectedManagerId == request.ManagerId)">–ù–∞–∑–Ω–∞—á–∏—Ç—å</button>
            }
            else
            {
                @(request.ManagerId.HasValue ? GetUserName(request.ManagerId.Value) : "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
            }
        </div>
        <div class="mb-3">
            <b>–ú–∞—Å—Ç–µ—Ä:</b> @(request.MasterId.HasValue ? GetUserName(request.MasterId.Value) : "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
        </div>
        <hr />
        <h5>–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤</h5>
        @if (statusHistory == null)
        {
            <div class="mb-3 text-muted">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</div>
        }
        else if (statusHistory.Length == 0)
        {
            <div class="mb-3 text-muted">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.</div>
        }
        else
        {
            <ul class="list-group mb-3">
                @foreach (var h in statusHistory)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span><b>@h.Status</b> <span class="text-muted">@h.ChangedAt.ToString("dd.MM.yyyy HH:mm")</span></span>
                        <span class="text-muted">
                            @(h.ChangedById.HasValue ? GetUserName(h.ChangedById.Value) : "–°–∏—Å—Ç–µ–º–∞")
                        </span>
                        @if (!string.IsNullOrWhiteSpace(h.Comment))
                        {
                            <span class="ms-2">@h.Comment</span>
                        }
                    </li>
                }
            </ul>
        }
        <h5>–ß–∞—Ç –ø–æ –∑–∞—è–≤–∫–µ</h5>
        <div class="mb-3 chat-box">
            @if (isChatLoading)
            {
                <div>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞...</div>
            }
            else
            {
                <div class="chat-messages">
                    @foreach (var msg in chatMessages.OrderBy(m => m.SentAt))
                    {
                        <div class="chat-message @(currentUser != null && msg.SenderId == currentUser.Id ? "my-message" : "")">
                            <b>@GetUserName(msg.SenderId):</b> @msg.Message
                            <span class="chat-time">@msg.SentAt.ToString("HH:mm dd.MM.yyyy")</span>
                        </div>
                    }
                </div>
                <div class="chat-input mt-2">
                    <input class="form-control" @bind="newMessage" @bind:event="oninput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." @onkeydown="@(e => { if (e.Key == "Enter") SendMessage(); })" />
                    <button class="btn btn-orange mt-2 w-100" @onclick="SendMessage">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
            }
        </div>
        <h5>–ó–∞–ø—á–∞—Å—Ç–∏ –ø–æ –∑–∞—è–≤–∫–µ</h5>
        @if (currentUser != null && (currentUser.RoleId == 1 || currentUser.RoleId == 2))
        {
            <button class="btn btn-orange mb-3" @onclick="ShowAddPartDialog">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å</button>
        }
        @if (requestParts == null)
        {
            <div class="mb-3 text-muted">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π...</div>
        }
        else if (requestParts.Length == 0)
        {
            <div class="mb-3 text-muted">–ó–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                            <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                            <th>–¶–µ–Ω–∞</th>
                            <th>–°—É–º–º–∞</th>
                            @if (currentUser != null && (currentUser.RoleId == 1 || currentUser.RoleId == 2))
                            {
                                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var part in requestParts)
                        {
                            <tr>
                                <td>@part.Part.Name</td>
                                <td>@part.Quantity</td>
                                <td>@part.Part.Price.ToString("C")</td>
                                <td>@((part.Quantity * part.Part.Price).ToString("C"))</td>
                                @if (currentUser != null && (currentUser.RoleId == 1 || currentUser.RoleId == 2))
                                {
                                    <td>
                                        <button class="btn btn-orange btn-sm me-1" @onclick="() => EditPart(part)">‚úèÔ∏è</button>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeletePart(part.Id)">üóëÔ∏è</button>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        <h5>–û–ø–ª–∞—Ç–∞</h5>
        @{
            var calculatedAmount = requestParts?.Sum(rp => rp.Quantity * rp.Part.Price) ?? 0;
            var workFee = calculatedAmount * 0.5m; // 50% –æ—Ç —Å—É–º–º—ã –∑–∞–ø—á–∞—Å—Ç–µ–π
            var totalAmount = calculatedAmount + workFee; // –û–±—â–∞—è —Å—É–º–º–∞ —Å—á–µ—Ç–∞
        }
        @if (payment == null)
        {
            <div class="mb-3">
                <div><b>–ó–∞–ø—á–∞—Å—Ç–∏:</b> @calculatedAmount.ToString("C")</div>
                <div><b>–†–∞–±–æ—Ç–∞ (50%):</b> @workFee.ToString("C")</div>
                <div class="border-top pt-2 mt-2"><b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> @totalAmount.ToString("C")</div>
                @if (currentUser != null && (currentUser.RoleId == 1 || currentUser.RoleId == 2))
                {
                    <button class="btn btn-orange mt-2" @onclick="CreatePayment">–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç</button>
                }
            </div>
        }
        else
        {
            <div class="mb-2"><b>–ó–∞–ø—á–∞—Å—Ç–∏:</b> @calculatedAmount.ToString("C")</div>
            <div class="mb-2"><b>–†–∞–±–æ—Ç–∞ (50%):</b> @workFee.ToString("C")</div>
            <div class="mb-2 border-top pt-2"><b>–°—É–º–º–∞ —Å—á–µ—Ç–∞:</b> @payment.Amount.ToString("C")</div>
            <div class="mb-2"><b>–°—Ç–∞—Ç—É—Å:</b> @payment.Status</div>
            <div class="mb-2"><b>–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã:</b> @(payment.PaidAt.HasValue ? payment.PaidAt.Value.ToString("dd.MM.yyyy HH:mm") : "-")</div>
            @if (payment.Status != "–û–ø–ª–∞—á–µ–Ω–æ")
            {
                @if (currentUser != null && currentUser.RoleId == 3 && request.ClientId == currentUser.Id)
                {
                    <div class="d-flex gap-2 mt-3">
                        <button class="btn btn-orange w-100" @onclick="Pay" disabled="@isPaying">@((isPaying ? "–û–ø–ª–∞—Ç–∞..." : "–û–ø–ª–∞—Ç–∏—Ç—å"))</button>
                        <button class="btn btn-orange w-100" @onclick="GoBack">–ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–∞–º</button>
                    </div>
                    @if (!string.IsNullOrEmpty(payError))
                    {
                        <div class="text-danger mt-2">@payError</div>
                    }
                }
                else
                {
                    <button class="btn btn-orange w-100 mt-3" @onclick="GoBack">–ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–∞–º</button>
                }
            }
            else
            {
                <div class="text-success">–û–ø–ª–∞—á–µ–Ω–æ</div>
                <button class="btn btn-orange w-100 mt-3" @onclick="GoBack">–ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–∞–º</button>
            }
        }
        <h5>–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–µ</h5>
        @if (repairReport == null && currentUser != null && currentUser.RoleId == 1 && request.Status == "–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        {
            <textarea class="form-control" @bind="newReportText" placeholder="–û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"></textarea>
            <button class="btn btn-orange mt-2" @onclick="SaveReport">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç</button>
        }
        else if (repairReport != null)
        {
            <div class="mb-2"><b>–ú–∞—Å—Ç–µ—Ä:</b> @GetUserName(repairReport.MasterId)</div>
            <div class="mb-2"><b>–î–∞—Ç–∞:</b> @repairReport.CreatedAt.ToString("dd.MM.yyyy HH:mm")</div>
            <div class="mb-2"><b>–û—Ç—á–µ—Ç:</b> @repairReport.ReportText</div>
        }
        else
        {
            <div class="text-muted">–û—Ç—á–µ—Ç –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω.</div>
        }
        <h5>–û—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞</h5>
        @if (reviewLoading)
        {
            <div class="text-muted">–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–∞...</div>
        }
        else if (currentUser != null && currentUser.RoleId == 3 && request.Status == "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" && review == null && request.ClientId == currentUser.Id)
        {
            <div class="mb-2">–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É:</div>
            <div class="mb-2">
                @for (int i = 1; i <= 5; i++)
                {
                    var starValue = i;
                    <span style="font-size:2rem;cursor:pointer;color:@(newReviewRating >= starValue ? "#ff9800" : "#ccc")" @onclick="() => newReviewRating = starValue">&#9733;</span>
                }
            </div>
            <textarea class="form-control mb-2" @bind="newReviewComment" placeholder="–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."></textarea>
            <button class="btn btn-orange" @onclick="SaveReview" disabled="@(newReviewRating == 0)">–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</button>
            @if (!string.IsNullOrEmpty(reviewError))
            {
                <div class="text-danger mt-2">@reviewError</div>
            }
        }
        else if (review != null)
        {
            <div class="mb-2">–û—Ü–µ–Ω–∫–∞:
                @for (int i = 1; i <= 5; i++)
                {
                    var starValue = i;
                    <span style="font-size:1.5rem;color:@(review.Rating >= starValue ? "#ff9800" : "#ccc")">&#9733;</span>
                }
            </div>
            <div class="mb-2">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <span>@review.Comment</span></div>
            <div class="mb-2 text-muted">@review.CreatedAt.ToString("dd.MM.yyyy HH:mm")</div>
        }
        else
        {
            <div class="text-muted">–û—Ç–∑—ã–≤ –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω.</div>
        }
    </div>
}

@if (showAddPartDialog)
{
    <div class="modal fade show" style="display: block; background: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddPartDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>–ó–∞–ø—á–∞—Å—Ç—å</label>
                        <select class="form-select" @bind="newPart.PartId">
                            <option value="0">–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—á–∞—Å—Ç—å</option>
                            @foreach (var part in allParts)
                            {
                                <option value="@part.Id">@part.Name - @part.Price.ToString("C")</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                        <input type="number" class="form-control" @bind="newPart.Quantity" min="1" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddPartDialog">–û—Ç–º–µ–Ω–∞</button>
                    <button type="button" class="btn btn-orange" @onclick="AddPart">–î–æ–±–∞–≤–∏—Ç—å</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showEditPartDialog && editingPart != null)
{
    <div class="modal fade show" style="display: block; background: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç—å</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditPartDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>–ó–∞–ø—á–∞—Å—Ç—å</label>
                        <input type="text" class="form-control" value="@(editingPart?.Part?.Name ?? "")" readonly />
                    </div>
                    <div class="mb-3">
                        <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                        <input type="number" class="form-control" @bind="editingPart.Quantity" min="1" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditPartDialog">–û—Ç–º–µ–Ω–∞</button>
                    <button type="button" class="btn btn-orange" @onclick="SavePart">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
.details-card-orange {
    background: #fff;
    border-radius: 22px;
    padding: 2.7rem 2.2rem 2.2rem 2.2rem;
    max-width: 600px;
    margin: 2rem auto;
    box-shadow: 0 10px 36px 0 rgba(255, 61, 0, 0.18);
    border: 1.5px solid #ff9800;
    position: relative;
    z-index: 2;
}
.btn-orange {
    background: linear-gradient(90deg, #ff9800 0%, #ff3d00 100%);
    border: none;
    border-radius: 10px;
    font-weight: 600;
    font-size: 1.1rem;
    padding: 0.8rem;
    color: #fff;
    box-shadow: 0 2px 8px 0 rgba(255, 152, 0, 0.12);
    transition: background 0.2s, box-shadow 0.2s;
}
.btn-orange:hover {
    background: linear-gradient(90deg, #ff6d00 0%, #d50000 100%);
    box-shadow: 0 4px 16px 0 rgba(255, 61, 0, 0.18);
}
.chat-box {
    background: #f8f8f8;
    border-radius: 12px;
    padding: 1rem;
    min-height: 220px;
    max-height: 320px;
    overflow-y: auto;
}
.chat-messages {
    max-height: 180px;
    overflow-y: auto;
}
.chat-message {
    margin-bottom: 0.5rem;
    padding: 0.4rem 0.7rem;
    border-radius: 8px;
    background: #fff;
    box-shadow: 0 1px 4px 0 rgba(255,152,0,0.07);
    position: relative;
}
.my-message {
    background: #ffe0b2;
    text-align: right;
}
.chat-time {
    font-size: 0.8em;
    color: #888;
    margin-left: 0.7em;
}
</style>

@code {
    [Parameter] public int RequestId { get; set; }
    private RepairRequest request;
    private string carName = "-";
    private User[] users;
    private Car[] cars;
    private RepairRequestStatusHistory[] statusHistory;
    private Payment payment;
    private bool isPaying = false;
    private string payError = null;
    private HubConnection hubConnection;
    private List<ChatMessage> chatMessages = new();
    private string newMessage = string.Empty;
    private bool isChatLoading = true;
    private SessiaBlazor.Model.User currentUser;
    private bool _userLoaded = false;
    private string editableStatus;
    private RepairPart[] requestParts;
    private bool showAddPartDialog = false;
    private bool showEditPartDialog = false;
    private RepairPart editingPart;
    private CreateRepairPartRequest newPart = new();
    private Part[] allParts;
    private int? selectedManagerId;
    private RepairReport repairReport;
    private string newReportText = string.Empty;
    private Review review;
    private bool reviewLoading = true;
    private int newReviewRating = 0;
    private string newReviewComment = string.Empty;
    private string reviewError = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_userLoaded)
        {
            await LoadCurrentUser();
            if (currentUser == null)
            {
                Nav.NavigateTo("/login", true);
                return;
            }
            await LoadRequest();
            editableStatus = request?.Status;
            await InitChat();
            await LoadReview();
            _userLoaded = true;
            StateHasChanged();
        }
    }

    private async Task LoadCurrentUser()
    {
        var json = await JS.InvokeAsync<string>("localStorage.getItem", "currentUser");
        if (!string.IsNullOrEmpty(json))
        {
            currentUser = System.Text.Json.JsonSerializer.Deserialize<SessiaBlazor.Model.User>(json);
        }
    }

    private async Task LoadRequest()
    {
        request = await Http.GetFromJsonAsync<RepairRequest>($"api/repairrequest/{RequestId}");
        cars = await Http.GetFromJsonAsync<Car[]>("api/car");
        users = await Http.GetFromJsonAsync<User[]>("api/user");
        var car = cars?.FirstOrDefault(c => c.Id == request.CarId);
        carName = car != null ? $"{car.Brand} {car.Model}" : "-";
        try
        {
            statusHistory = await Http.GetFromJsonAsync<RepairRequestStatusHistory[]>($"api/repairrequest/{RequestId}/statushistory");
        }
        catch (HttpRequestException)
        {
            statusHistory = Array.Empty<RepairRequestStatusHistory>();
        }
        try
        {
            var payments = await Http.GetFromJsonAsync<Payment[]>("api/payment");
            payment = payments?.FirstOrDefault(p => p.RepairRequestId == RequestId);
        }
        catch (HttpRequestException)
        {
            payment = null;
        }
        requestParts = await Http.GetFromJsonAsync<RepairPart[]>($"api/repairpart");
        var requestPartsFiltered = requestParts?.Where(rp => rp.RepairRequestId == RequestId).ToArray();
        requestParts = requestPartsFiltered ?? Array.Empty<RepairPart>();
        allParts = await Http.GetFromJsonAsync<Part[]>("api/part");
        try
        {
            repairReport = await Http.GetFromJsonAsync<RepairReport>($"api/repairreport/byrequest/{RequestId}");
        }
        catch (HttpRequestException)
        {
            // –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            repairReport = null;
        }
    }

    private async Task InitChat()
    {
        isChatLoading = true;
        chatMessages = new List<ChatMessage>();
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ API
        var msgs = await Http.GetFromJsonAsync<ChatMessage[]>($"api/chatmessage/byrequest/{RequestId}");
        if (msgs != null) chatMessages = msgs.ToList();
        // SignalR
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5263/chathub")
            .Build();
        hubConnection.On<int, string, string, DateTime>("ReceiveMessage", (userId, userName, message, sentAt) =>
        {
            InvokeAsync(() =>
            {
                chatMessages.Add(new ChatMessage
                {
                    RepairRequestId = RequestId,
                    SenderId = userId,
                    SenderName = userName,
                    Message = message,
                    SentAt = sentAt
                });
                StateHasChanged();
            });
        });
        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("JoinRequestChat", RequestId);
        isChatLoading = false;
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage)) return;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î —á–µ—Ä–µ–∑ API
        var createRequest = new {
            RepairRequestId = RequestId,
            SenderId = currentUser.Id,
            MessageText = newMessage
        };
        var response = await Http.PostAsJsonAsync("api/chatmessage", createRequest);
        if (response.IsSuccessStatusCode)
        {
            // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∞–µ–º —á–µ—Ä–µ–∑ SignalR
            var senderName = currentUser.UserName;
            await hubConnection.InvokeAsync("SendMessage", RequestId, currentUser.Id, senderName, newMessage);
            newMessage = string.Empty;
        }
    }

    private string GetUserName(int userId)
    {
        var user = users?.FirstOrDefault(u => u.Id == userId);
        return user != null ? user.UserName : "-";
    }

    private void GoBack()
    {
        Nav.NavigateTo("/requests");
    }

    private async Task Pay()
    {
        isPaying = true;
        payError = null;
        try
        {
            var update = new {
                RepairRequestId = payment.RepairRequestId,
                Amount = payment.Amount,
                PaidAt = DateTime.Now,
                Status = "–û–ø–ª–∞—á–µ–Ω–æ"
            };
            var response = await Http.PutAsJsonAsync($"api/payment/{payment.Id}", update);
            if (response.IsSuccessStatusCode)
            {
                await LoadRequest();
            }
            else
            {
                payError = "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã";
            }
        }
        catch
        {
            payError = "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã";
        }
        isPaying = false;
    }

    private async Task SaveStatus()
    {
        if (request == null || editableStatus == request.Status) return;
        var update = new UpdateRepairRequest
        {
            CarId = request.CarId,
            ClientId = request.ClientId,
            ManagerId = request.ManagerId,
            MasterId = request.MasterId,
            Description = request.Description,
            Status = editableStatus,
            DesiredDate = request.DesiredDate
        };
        var resp = await Http.PutAsJsonAsync($"api/repairrequest/{request.Id}", update);
        if (resp.IsSuccessStatusCode)
        {
            request.Status = editableStatus;
            StateHasChanged();
        }
    }

    private void ShowAddPartDialog()
    {
        showAddPartDialog = true;
        newPart = new CreateRepairPartRequest { RepairRequestId = RequestId, PartId = 0, Quantity = 1 };
    }

    private void CloseAddPartDialog()
    {
        showAddPartDialog = false;
    }

    private void EditPart(RepairPart part)
    {
        showEditPartDialog = true;
        editingPart = part;
    }

    private void CloseEditPartDialog()
    {
        showEditPartDialog = false;
    }

    private async Task AddPart()
    {
        if (newPart.PartId == 0) return;
        
        var response = await Http.PostAsJsonAsync("api/repairpart", newPart);
        if (response.IsSuccessStatusCode)
        {
            showAddPartDialog = false;
            await LoadRequest();
        }
    }

    private async Task SavePart()
    {
        if (editingPart == null) return;
        
        var update = new UpdateRepairPartRequest
        {
            RepairRequestId = editingPart.RepairRequestId,
            PartId = editingPart.PartId,
            Quantity = editingPart.Quantity
        };
        
        var response = await Http.PutAsJsonAsync($"api/repairpart/{editingPart.Id}", update);
        if (response.IsSuccessStatusCode)
        {
            showEditPartDialog = false;
            await LoadRequest();
        }
    }

    private async Task DeletePart(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å –∏–∑ –∑–∞—è–≤–∫–∏?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"api/repairpart/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadRequest();
            }
        }
    }

    private async Task CreatePayment()
    {
        var calculatedAmount = requestParts?.Sum(rp => rp.Quantity * rp.Part.Price) ?? 0;
        if (calculatedAmount <= 0)
        {
            await JS.InvokeVoidAsync("alert", "–ù–µ—Ç –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞");
            return;
        }

        var workFee = calculatedAmount * 0.5m; // 50% –æ—Ç —Å—É–º–º—ã –∑–∞–ø—á–∞—Å—Ç–µ–π
        var totalAmount = calculatedAmount + workFee; // –û–±—â–∞—è —Å—É–º–º–∞ —Å—á–µ—Ç–∞

        var createRequest = new
        {
            RepairRequestId = RequestId,
            Amount = totalAmount,
            Status = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
        };

        var response = await Http.PostAsJsonAsync("api/payment", createRequest);
        if (response.IsSuccessStatusCode)
        {
            await LoadRequest();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞");
        }
    }

    private async Task AssignManager()
    {
        if (selectedManagerId == null) return;
        
        var update = new UpdateRepairRequest
        {
            CarId = request.CarId,
            ClientId = request.ClientId,
            ManagerId = selectedManagerId,
            MasterId = request.MasterId,
            Description = request.Description,
            Status = request.Status,
            DesiredDate = request.DesiredDate
        };
        
        var resp = await Http.PutAsJsonAsync($"api/repairrequest/{request.Id}", update);
        if (resp.IsSuccessStatusCode)
        {
            request.ManagerId = selectedManagerId;
            StateHasChanged();
        }
    }

    private async Task SaveReport()
    {
        if (string.IsNullOrWhiteSpace(newReportText))
        {
            await JS.InvokeVoidAsync("alert", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç");
            return;
        }

        var createRequest = new
        {
            RepairRequestId = RequestId,
            ReportText = newReportText,
            MasterId = currentUser.Id
        };

        var response = await Http.PostAsJsonAsync("api/repairreport", createRequest);
        if (response.IsSuccessStatusCode)
        {
            await LoadRequest();
            newReportText = string.Empty;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞");
        }
    }

    private async Task LoadReview()
    {
        reviewLoading = true;
        try
        {
            review = await Http.GetFromJsonAsync<Review>($"api/review/byrequest/{RequestId}");
        }
        catch
        {
            review = null;
        }
        reviewLoading = false;
        StateHasChanged();
    }

    private async Task SaveReview()
    {
        reviewError = null;
        if (newReviewRating == 0)
        {
            reviewError = "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É";
            return;
        }
        var createRequest = new
        {
            RepairRequestId = RequestId,
            ClientId = currentUser.Id,
            MasterId = request.MasterId,
            Rating = newReviewRating,
            Comment = newReviewComment
        };
        var resp = await Http.PostAsJsonAsync("api/review", createRequest);
        if (resp.IsSuccessStatusCode)
        {
            await LoadReview();
        }
        else
        {
            reviewError = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞";
        }
    }
} 