@page "/spares"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Net.Http.Json
@rendermode InteractiveServer

<div class="spares-bg-orange">
    <div class="spares-card-orange shadow">
        <h3 class="text-center mb-4">–°–∫–ª–∞–¥ –∑–∞–ø—á–∞—Å—Ç–µ–π</h3>
        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        @if (spares == null)
        {
            <p class="text-center">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        }
        else
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th>–û—Å—Ç–∞—Ç–æ–∫</th>
                        <th>–¶–µ–Ω–∞</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var part in spares)
                    {
                        <tr>
                            <td>@part.Id</td>
                            <td>@part.Name</td>
                            <td>@part.Quantity</td>
                            <td>@part.Price.ToString("C")</td>
                            <td>
                                <button class="btn btn-orange btn-sm me-1" @onclick="() => EditPart(part)">‚úèÔ∏è</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeletePart(part.Id)">üóëÔ∏è</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <hr />
            <h5 class="mb-2">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å</h5>
            <EditForm Model="newPart" OnValidSubmit="AddPart" FormName="AddPartForm">
                <div class="row g-2">
                    <div class="col">
                        <InputText @bind-Value="newPart.Name" class="form-control" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" required />
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="newPart.Quantity" class="form-control" placeholder="–û—Å—Ç–∞—Ç–æ–∫" min="0" required />
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="newPart.Price" class="form-control" placeholder="–¶–µ–Ω–∞" />
                    </div>
                </div>
                <button type="submit" class="btn btn-orange w-100 mt-3">–î–æ–±–∞–≤–∏—Ç—å</button>
            </EditForm>
            @if (showEditForm && editingPart != null)
            {
                <div class="mb-4 mt-3 p-3" style="background:#fffbe6; border-radius:12px; border:1.5px solid #ff9800; max-width:600px; margin:auto;">
                    <h5>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ ‚Ññ@editingPartId</h5>
                    <EditForm Model="editingPart" OnValidSubmit="SaveEditPart" FormName="EditPartForm">
                        <div class="row g-2">
                            <div class="col">
                                <InputText @bind-Value="editingPart.Name" class="form-control" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" />
                            </div>
                            <div class="col">
                                <InputNumber @bind-Value="editingPart.Quantity" class="form-control" placeholder="–û—Å—Ç–∞—Ç–æ–∫" min="0" required />
                            </div>
                            <div class="col">
                                <InputNumber @bind-Value="editingPart.Price" class="form-control" placeholder="–¶–µ–Ω–∞" />
                            </div>
                        </div>
                        <button type="submit" class="btn btn-orange me-2 mt-3">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        <button type="button" class="btn btn-secondary mt-3" @onclick="() => showEditForm = false">–û—Ç–º–µ–Ω–∞</button>
                    </EditForm>
                </div>
            }
        }
    </div>
</div>

<style>
.spares-bg-orange {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #ff9800 0%, #ff3d00 100%);
}
.spares-card-orange {
    background: #fff;
    border-radius: 22px;
    padding: 2.7rem 2.2rem 2.2rem 2.2rem;
    max-width: 700px;
    width: 100%;
    box-shadow: 0 10px 36px 0 rgba(255, 61, 0, 0.18);
    transition: box-shadow 0.2s, transform 0.2s;
    border: 1.5px solid #ff9800;
    position: relative;
    z-index: 2;
}
.btn-orange {
    background: linear-gradient(90deg, #ff9800 0%, #ff3d00 100%);
    border: none;
    border-radius: 10px;
    font-weight: 600;
    font-size: 1.1rem;
    padding: 0.5rem 1.2rem;
    color: #fff;
    box-shadow: 0 2px 8px 0 rgba(255, 152, 0, 0.12);
    transition: background 0.2s, box-shadow 0.2s;
}
.btn-orange:hover {
    background: linear-gradient(90deg, #ff6d00 0%, #d50000 100%);
    box-shadow: 0 4px 16px 0 rgba(255, 61, 0, 0.18);
}
</style>

@code {
    private PartDto[] spares;
    private CreatePartRequest newPart = new();
    private UpdatePartRequest editingPart;
    private bool showEditForm = false;
    private string errorMessage;
    private int editingPartId;

    public class CreatePartRequest
    {
        public string Name { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
    public class UpdatePartRequest
    {
        public string Name { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
    public class PartDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSpares();
    }

    private async Task LoadSpares()
    {
        spares = await Http.GetFromJsonAsync<PartDto[]>("api/part");
    }

    private async Task AddPart()
    {
        errorMessage = null;
        if (string.IsNullOrWhiteSpace(newPart.Name))
        {
            errorMessage = "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!";
            return;
        }
        var req = new CreatePartRequest
        {
            Name = newPart.Name,
            Quantity = newPart.Quantity,
            Price = newPart.Price
        };
        var resp = await Http.PostAsJsonAsync("api/part", req);
        if (resp.IsSuccessStatusCode)
        {
            await LoadSpares();
            newPart.Name = string.Empty;
            newPart.Quantity = 0;
            newPart.Price = 0;
            StateHasChanged();
        }
        else
        {
            errorMessage = $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {resp.StatusCode}";
            var details = await resp.Content.ReadAsStringAsync();
            if (!string.IsNullOrWhiteSpace(details)) errorMessage += $"\n{details}";
        }
    }

    private void EditPart(PartDto part)
    {
        editingPart = new UpdatePartRequest
        {
            Name = part.Name,
            Quantity = part.Quantity,
            Price = part.Price
        };
        editingPartId = part.Id;
        showEditForm = true;
    }

    private async Task SaveEditPart()
    {
        errorMessage = null;
        var req = new UpdatePartRequest
        {
            Name = editingPart.Name,
            Quantity = editingPart.Quantity,
            Price = editingPart.Price
        };
        var resp = await Http.PutAsJsonAsync($"api/part/{editingPartId}", req);
        if (resp.IsSuccessStatusCode)
        {
            showEditForm = false;
            editingPart = null;
            await LoadSpares();
        }
        else
        {
            errorMessage = $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {resp.StatusCode}";
            var details = await resp.Content.ReadAsStringAsync();
            if (!string.IsNullOrWhiteSpace(details)) errorMessage += $"\n{details}";
        }
    }

    private async Task DeletePart(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å #{id}?");
        if (confirmed)
        {
            var resp = await Http.DeleteAsync($"api/part/{id}");
            if (resp.IsSuccessStatusCode)
            {
                await LoadSpares();
            }
        }
    }
} 