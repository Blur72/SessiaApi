@page "/payments"
@inject HttpClient Http
@inject IJSRuntime JS
@rendermode InteractiveServer
@using System.Net.Http.Json

<div class="payments-bg-orange">
    <div class="payments-card-orange shadow">
        <h3 class="text-center mb-4">–ü–ª–∞—Ç–µ–∂–∏</h3>
        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        @if (payments == null)
        {
            <p class="text-center">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        }
        else
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>–ó–∞—è–≤–∫–∞</th>
                        <th>–°—É–º–º–∞</th>
                        <th>–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in payments)
                    {
                        <tr>
                            <td>@p.Id</td>
                            <td>@p.RepairRequestId</td>
                            <td>@p.Amount.ToString("C")</td>
                            <td>@(p.PaidAt?.ToString("dd.MM.yyyy") ?? "-")</td>
                            <td>@p.Status</td>
                            <td>
                                <button class="btn btn-orange btn-sm me-1" @onclick="() => EditPayment(p)">‚úèÔ∏è</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeletePayment(p.Id)">üóëÔ∏è</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <hr />
            <h5 class="mb-2">–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂</h5>
            <EditForm Model="newPayment" OnValidSubmit="AddPayment">
                <div class="row g-2">
                    <div class="col">
                        <InputNumber @bind-Value="newPayment.RepairRequestId" class="form-control" placeholder="ID –∑–∞—è–≤–∫–∏" required />
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="newPayment.Amount" class="form-control" placeholder="–°—É–º–º–∞" required />
                    </div>
                    <div class="col">
                        <InputDate @bind-Value="newPayment.PaidAt" class="form-control" />
                    </div>
                    <div class="col">
                        <InputText @bind-Value="newPayment.Status" class="form-control" placeholder="–°—Ç–∞—Ç—É—Å" required />
                    </div>
                </div>
                <button type="submit" class="btn btn-orange w-100 mt-3">–î–æ–±–∞–≤–∏—Ç—å</button>
            </EditForm>
            @if (showEditForm && editingPayment != null)
            {
                <div class="mb-4 mt-3 p-3" style="background:#fffbe6; border-radius:12px; border:1.5px solid #ff9800; max-width:600px; margin:auto;">
                    <h5>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ ‚Ññ@editingPaymentId</h5>
                    <EditForm Model="editingPayment" OnValidSubmit="SaveEditPayment">
                        <div class="row g-2">
                            <div class="col">
                                <InputNumber @bind-Value="editingPayment.RepairRequestId" class="form-control" placeholder="ID –∑–∞—è–≤–∫–∏" required />
                            </div>
                            <div class="col">
                                <InputNumber @bind-Value="editingPayment.Amount" class="form-control" placeholder="–°—É–º–º–∞" required />
                            </div>
                            <div class="col">
                                <InputDate @bind-Value="editingPayment.PaidAt" class="form-control" />
                            </div>
                            <div class="col">
                                <InputText @bind-Value="editingPayment.Status" class="form-control" placeholder="–°—Ç–∞—Ç—É—Å" required />
                            </div>
                        </div>
                        <button type="submit" class="btn btn-orange me-2 mt-3">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        <button type="button" class="btn btn-secondary mt-3" @onclick="() => showEditForm = false">–û—Ç–º–µ–Ω–∞</button>
                    </EditForm>
                </div>
            }
        }
    </div>
</div>

<style>
.payments-bg-orange {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #ff9800 0%, #ff3d00 100%);
}
.payments-card-orange {
    background: #fff;
    border-radius: 22px;
    padding: 2.7rem 2.2rem 2.2rem 2.2rem;
    max-width: 900px;
    width: 100%;
    box-shadow: 0 10px 36px 0 rgba(255, 61, 0, 0.18);
    transition: box-shadow 0.2s, transform 0.2s;
    border: 1.5px solid #ff9800;
    position: relative;
    z-index: 2;
}
.btn-orange {
    background: linear-gradient(90deg, #ff9800 0%, #ff3d00 100%);
    border: none;
    border-radius: 10px;
    font-weight: 600;
    font-size: 1.1rem;
    padding: 0.5rem 1.2rem;
    color: #fff;
    box-shadow: 0 2px 8px 0 rgba(255, 152, 0, 0.12);
    transition: background 0.2s, box-shadow 0.2s;
}
.btn-orange:hover {
    background: linear-gradient(90deg, #ff6d00 0%, #d50000 100%);
    box-shadow: 0 4px 16px 0 rgba(255, 61, 0, 0.18);
}
</style>

@code {
    private PaymentDto[] payments;
    private CreatePaymentRequest newPayment = new();
    private UpdatePaymentRequest editingPayment;
    private bool showEditForm = false;
    private string errorMessage;
    private int editingPaymentId;

    public class PaymentDto
    {
        public int Id { get; set; }
        public int RepairRequestId { get; set; }
        public decimal Amount { get; set; }
        public DateTime? PaidAt { get; set; }
        public string Status { get; set; }
    }
    public class CreatePaymentRequest
    {
        public int RepairRequestId { get; set; }
        public decimal Amount { get; set; }
        public DateTime? PaidAt { get; set; }
        public string Status { get; set; }
    }
    public class UpdatePaymentRequest
    {
        public int RepairRequestId { get; set; }
        public decimal Amount { get; set; }
        public DateTime? PaidAt { get; set; }
        public string Status { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPayments();
    }

    private async Task LoadPayments()
    {
        payments = await Http.GetFromJsonAsync<PaymentDto[]>("api/payment");
    }

    private async Task AddPayment()
    {
        errorMessage = null;
        var req = new CreatePaymentRequest
        {
            RepairRequestId = newPayment.RepairRequestId,
            Amount = newPayment.Amount,
            PaidAt = newPayment.PaidAt,
            Status = newPayment.Status
        };
        var resp = await Http.PostAsJsonAsync("api/payment", req);
        if (resp.IsSuccessStatusCode)
        {
            await LoadPayments();
            newPayment = new();
        }
        else
        {
            errorMessage = $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {resp.StatusCode}";
            var details = await resp.Content.ReadAsStringAsync();
            if (!string.IsNullOrWhiteSpace(details) && details.Contains("FOREIGN KEY"))
                errorMessage = "–û—à–∏–±–∫–∞: –ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.";
            else if (!string.IsNullOrWhiteSpace(details))
                errorMessage += $"\n{details}";
        }
    }

    private void EditPayment(PaymentDto p)
    {
        editingPayment = new UpdatePaymentRequest
        {
            RepairRequestId = p.RepairRequestId,
            Amount = p.Amount,
            PaidAt = p.PaidAt,
            Status = p.Status
        };
        editingPaymentId = p.Id;
        showEditForm = true;
    }

    private async Task SaveEditPayment()
    {
        errorMessage = null;
        var req = new UpdatePaymentRequest
        {
            RepairRequestId = editingPayment.RepairRequestId,
            Amount = editingPayment.Amount,
            PaidAt = editingPayment.PaidAt,
            Status = editingPayment.Status
        };
        var resp = await Http.PutAsJsonAsync($"api/payment/{editingPaymentId}", req);
        if (resp.IsSuccessStatusCode)
        {
            showEditForm = false;
            editingPayment = null;
            await LoadPayments();
        }
        else
        {
            errorMessage = $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {resp.StatusCode}";
            var details = await resp.Content.ReadAsStringAsync();
            if (!string.IsNullOrWhiteSpace(details) && details.Contains("FOREIGN KEY"))
                errorMessage = "–û—à–∏–±–∫–∞: –ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.";
            else if (!string.IsNullOrWhiteSpace(details))
                errorMessage += $"\n{details}";
        }
    }

    private async Task DeletePayment(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"–£–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç–µ–∂ #{id}?");
        if (confirmed)
        {
            var resp = await Http.DeleteAsync($"api/payment/{id}");
            if (resp.IsSuccessStatusCode)
            {
                await LoadPayments();
            }
        }
    }
} 